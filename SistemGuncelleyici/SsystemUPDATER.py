#!/usr/bin/env python3
"""
üöÄ Evrensel √áapraz Platform Sistem G√ºncelleyici
Windows, macOS ve Linux i√ßin tam destek
"""

import os
import platform
import shutil
import subprocess
import threading
import time
from datetime import datetime
import customtkinter as ctk
from tkinter import messagebox
import sys

# ---------- Platform Tespiti ----------
class PlatformDetector:
    @staticmethod
    def get_platform_info():
        """Detaylƒ± platform bilgilerini d√∂nd√ºr"""
        system = platform.system().lower()
        info = {
            'system': system,
            'release': platform.release(),
            'version': platform.version(),
            'architecture': platform.architecture()[0],
            'processor': platform.processor(),
            'python_version': platform.python_version()
        }
        
        # Daƒüƒ±tƒ±m bilgisi (Linux i√ßin)
        if system == 'linux':
            info['distribution'] = PlatformDetector.get_linux_distro()
        elif system == 'darwin':
            info['distribution'] = PlatformDetector.get_macos_version()
            
        return info
    
    @staticmethod
    def get_linux_distro():
        """Linux daƒüƒ±tƒ±mƒ±nƒ± tespit et"""
        try:
            if os.path.exists('/etc/os-release'):
                with open('/etc/os-release', 'r') as f:
                    for line in f:
                        if line.startswith('PRETTY_NAME='):
                            return line.split('=')[1].strip().strip('"')
            elif os.path.exists('/etc/redhat-release'):
                with open('/etc/redhat-release', 'r') as f:
                    return f.read().strip()
        except:
            pass
        return "Linux"
    
    @staticmethod
    def get_macos_version():
        """macOS versiyonunu tespit et"""
        try:
            result = subprocess.run(['sw_vers', '-productVersion'], 
                                  capture_output=True, text=True)
            return f"macOS {result.stdout.strip()}"
        except:
            return "macOS"

# ---------- √áapraz Platform Paket Y√∂neticileri ----------
class CrossPlatformPackageManager:
    def __init__(self):
        self.platform_info = PlatformDetector.get_platform_info()
        self.system = self.platform_info['system']
        
    def get_available_managers(self):
        """Mevcut paket y√∂neticilerini tespit et"""
        managers = {}
        
        if self.system == 'windows':
            managers.update(self._get_windows_managers())
        elif self.system == 'darwin':
            managers.update(self._get_macos_managers())
        elif self.system == 'linux':
            managers.update(self._get_linux_managers())
            
        return managers
    
    def _get_windows_managers(self):
        """Windows paket y√∂neticileri"""
        managers = {}
        
        # Winget (Modern Windows)
        if shutil.which('winget'):
            managers['winget'] = {
                'name': 'Windows Package Manager',
                'description': 'Microsoft resmi paket y√∂neticisi',
                'commands': [
                    ['winget', 'upgrade', '--all', '--accept-source-agreements', '--accept-package-agreements']
                ]
            }
        
        # Chocolatey
        if shutil.which('choco'):
            managers['choco'] = {
                'name': 'Chocolatey',
                'description': 'Windows i√ßin paket y√∂neticisi',
                'commands': [
                    ['choco', 'upgrade', 'all', '-y']
                ]
            }
            
        # Scoop
        if shutil.which('scoop'):
            managers['scoop'] = {
                'name': 'Scoop',
                'description': 'Windows i√ßin komut satƒ±rƒ± y√ºkleyici',
                'commands': [
                    ['scoop', 'update'],
                    ['scoop', 'update', '*']
                ]
            }
            
        return managers
    
    def _get_macos_managers(self):
        """macOS paket y√∂neticileri"""
        managers = {}
        
        # Homebrew
        if shutil.which('brew'):
            managers['brew'] = {
                'name': 'Homebrew',
                'description': 'macOS i√ßin paket y√∂neticisi',
                'commands': [
                    ['brew', 'update'],
                    ['brew', 'upgrade'],
                    ['brew', 'cleanup', '-s']
                ]
            }
        
        # Mac App Store (mas)
        if shutil.which('mas'):
            managers['mas'] = {
                'name': 'Mac App Store',
                'description': 'Mac App Store uygulamalarƒ±',
                'commands': [
                    ['mas', 'upgrade']
                ]
            }
            
        # port (MacPorts)
        if shutil.which('port'):
            managers['port'] = {
                'name': 'MacPorts',
                'description': 'macOS paket y√∂netimi',
                'commands': [
                    ['sudo', 'port', 'selfupdate'],
                    ['sudo', 'port', 'upgrade', 'outdated']
                ]
            }
            
        return managers
    
    def _get_linux_managers(self):
        """Linux paket y√∂neticileri"""
        managers = {}
        distro = self.platform_info.get('distribution', '').lower()
        
        # APT (Debian/Ubuntu/Mint)
        if shutil.which('apt') or shutil.which('apt-get'):
            apt_cmd = 'apt' if shutil.which('apt') else 'apt-get'
            managers['apt'] = {
                'name': 'APT Package Manager',
                'description': 'Debian tabanlƒ± sistemler',
                'commands': [
                    ['sudo', apt_cmd, 'update'],
                    ['sudo', apt_cmd, 'upgrade', '-y'],
                    ['sudo', apt_cmd, 'autoremove', '-y']
                ]
            }
        
        # DNF (Fedora/RHEL)
        if shutil.which('dnf'):
            managers['dnf'] = {
                'name': 'DNF Package Manager',
                'description': 'Fedora/RHEL tabanlƒ± sistemler',
                'commands': [
                    ['sudo', 'dnf', 'upgrade', '--refresh', '-y']
                ]
            }
        
        # Pacman (Arch/Manjaro)
        if shutil.which('pacman'):
            managers['pacman'] = {
                'name': 'Pacman Package Manager',
                'description': 'Arch Linux tabanlƒ± sistemler',
                'commands': [
                    ['sudo', 'pacman', '-Syu', '--noconfirm']
                ]
            }
        
        # Zypper (openSUSE)
        if shutil.which('zypper'):
            managers['zypper'] = {
                'name': 'Zypper Package Manager',
                'description': 'openSUSE tabanlƒ± sistemler',
                'commands': [
                    ['sudo', 'zypper', 'refresh'],
                    ['sudo', 'zypper', 'update', '-y']
                ]
            }
        
        # Snap
        if shutil.which('snap'):
            managers['snap'] = {
                'name': 'Snap Packages',
                'description': 'Universal Linux paketleri',
                'commands': [
                    ['sudo', 'snap', 'refresh']
                ]
            }
        
        # Flatpak
        if shutil.which('flatpak'):
            managers['flatpak'] = {
                'name': 'Flatpak Applications',
                'description': 'Flatpak uygulamalarƒ±',
                'commands': [
                    ['flatpak', 'update', '-y']
                ]
            }
            
        return managers

# ---------- Platforma √ñzel GUI Ayarlarƒ± ----------
class PlatformSpecificUI:
    @staticmethod
    def get_platform_theme():
        """Platforma g√∂re tema se√ß"""
        system = platform.system().lower()
        
        if system == 'windows':
            return "blue"
        elif system == 'darwin':
            return "green" 
        elif system == 'linux':
            return "dark-blue"
        else:
            return "blue"
    
    @staticmethod
    def get_window_size():
        """Platforma g√∂re pencere boyutu"""
        system = platform.system().lower()
        
        if system == 'windows':
            return "500x400"
        elif system == 'darwin':
            return "550x450"  # macOS'ta biraz daha b√ºy√ºk
        elif system == 'linux':
            return "500x400"
        else:
            return "500x400"
    
    @staticmethod
    def get_platform_icon():
        """Platforma g√∂re ikon"""
        system = platform.system().lower()
        
        icons = {
            'windows': 'ü™ü',
            'darwin': 'üçé', 
            'linux': 'üêß'
        }
        return icons.get(system, 'üíª')

# ---------- √áapraz Platform G√ºncelleme Y√∂neticisi ----------
class UniversalUpdateManager:
    def __init__(self):
        self.package_manager = CrossPlatformPackageManager()
        self.managers = self.package_manager.get_available_managers()
        
    def run_updates(self, callback_progress, callback_done):
        """T√ºm g√ºncellemeleri √ßalƒ±≈ütƒ±r"""
        if not self.managers:
            callback_done("‚ùå Sisteminizde paket y√∂neticisi bulunamadƒ±", [])
            return
        
        total_commands = sum(len(mgr['commands']) for mgr in self.managers.values())
        completed = 0
        success_count = 0
        details = []
        
        for manager_id, manager_info in self.managers.items():
            for command in manager_info['commands']:
                completed += 1
                progress = (completed / total_commands) * 100
                
                callback_progress(progress, f"{manager_info['name']} - {command[0]}")
                
                try:
                    # Linux/macOS i√ßin sudo gerekiyorsa
                    if platform.system().lower() != 'windows' and command[0] == 'sudo':
                        # GUI ≈üifre isteme (basit versiyon)
                        result = self._run_command_with_privileges(command)
                    else:
                        result = subprocess.run(
                            command, 
                            capture_output=True, 
                            text=True, 
                            timeout=300,
                            shell=False
                        )
                    
                    if result.returncode == 0:
                        success_count += 1
                        details.append(f"‚úÖ {manager_info['name']} - Ba≈üarƒ±lƒ±")
                    else:
                        error_msg = result.stderr[:100] if result.stderr else "Bilinmeyen hata"
                        details.append(f"‚ùå {manager_info['name']} - Hata: {error_msg}")
                        
                except subprocess.TimeoutExpired:
                    details.append(f"‚è∞ {manager_info['name']} - Zaman a≈üƒ±mƒ±")
                except Exception as e:
                    details.append(f"‚ö†Ô∏è {manager_info['name']} - Hata: {str(e)}")
                
                time.sleep(1)  # Sistem y√ºk√ºn√º azaltmak i√ßin
        
        summary = f"üéâ G√ºncelleme tamamlandƒ±! {success_count}/{total_commands} ba≈üarƒ±lƒ±"
        callback_done(summary, details)
    
    def _run_command_with_privileges(self, command):
        """Ayrƒ±calƒ±klƒ± komut √ßalƒ±≈ütƒ±rma (basit implementasyon)"""
        # Not: Ger√ßek uygulamada GUI ≈üifre istemesi eklenmeli
        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=300,
                shell=False
            )
            return result
        except:
            # ≈ûifre gerekirse burada GUI dialog g√∂sterilebilir
            return type('obj', (object,), {'returncode': 1, 'stderr': 'ƒ∞zin reddedildi'})()

# ---------- Geli≈ümi≈ü Detaylar Penceresi ----------
class AdvancedDetailsWindow(ctk.CTkToplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("üîç Detaylƒ± Sistem Bilgileri")
        self.geometry("700x600")
        self.transient(parent)
        self.grab_set()
        
        self.platform_info = PlatformDetector.get_platform_info()
        self.package_manager = CrossPlatformPackageManager()
        
        self.setup_ui()
    
    def setup_ui(self):
        # Sekmeler
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Sistem Bilgileri
        self.tabview.add("üñ•Ô∏è Sistem Bilgileri")
        self.setup_system_tab()
        
        # Paket Y√∂neticileri
        self.tabview.add("üì¶ Paket Y√∂neticileri")
        self.setup_packages_tab()
        
        # G√ºncelleme Ge√ßmi≈üi
        self.tabview.add("üìä G√ºncelleme Durumu")
        self.setup_status_tab()
    
    def setup_system_tab(self):
        text_widget = ctk.CTkTextbox(self.tabview.tab("üñ•Ô∏è Sistem Bilgileri"))
        text_widget.pack(fill="both", expand=True, padx=10, pady=10)
        
        text_widget.insert("end", "üîß DETAYLI Sƒ∞STEM Bƒ∞LGƒ∞LERƒ∞\n\n")
        for key, value in self.platform_info.items():
            text_widget.insert("end", f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n")
        
        text_widget.configure(state="disabled")
    
    def setup_packages_tab(self):
        text_widget = ctk.CTkTextbox(self.tabview.tab("üì¶ Paket Y√∂neticileri"))
        text_widget.pack(fill="both", expand=True, padx=10, pady=10)
        
        managers = self.package_manager.get_available_managers()
        
        text_widget.insert("end", "üì¶ TESPƒ∞T EDƒ∞LEN PAKET Y√ñNETƒ∞Cƒ∞LERƒ∞\n\n")
        
        if managers:
            for manager_id, manager_info in managers.items():
                text_widget.insert("end", f"‚úÖ {manager_info['name']}\n")
                text_widget.insert("end", f"   üìù {manager_info['description']}\n")
                text_widget.insert("end", f"   ‚öôÔ∏è  Komutlar: {' | '.join([' '.join(cmd) for cmd in manager_info['commands']])}\n\n")
        else:
            text_widget.insert("end", "‚ùå Paket y√∂neticisi bulunamadƒ±\n")
        
        text_widget.configure(state="disabled")
    
    def setup_status_tab(self):
        text_widget = ctk.CTkTextbox(self.tabview.tab("üìä G√ºncelleme Durumu"))
        text_widget.pack(fill="both", expand=True, padx=10, pady=10)
        
        text_widget.insert("end", "üîÑ G√úNCELLEME DURUMU\n\n")
        text_widget.insert("end", f"‚Ä¢ Platform: {self.platform_info['system'].title()}\n")
        text_widget.insert("end", f"‚Ä¢ Mimari: {self.platform_info['architecture']}\n")
        text_widget.insert("end", f"‚Ä¢ Python: {self.platform_info['python_version']}\n\n")
        
        managers = self.package_manager.get_available_managers()
        text_widget.insert("end", f"‚Ä¢ Tespit Edilen Y√∂neticiler: {len(managers)}\n")
        
        text_widget.configure(state="disabled")

# ---------- Ana Uygulama ----------
class UniversalUpdaterApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Platforma √∂zel ayarlar
        self.platform_ui = PlatformSpecificUI()
        self.theme = self.platform_ui.get_platform_theme()
        self.window_size = self.platform_ui.get_window_size()
        self.platform_icon = self.platform_ui.get_platform_icon()
        
        # GUI ayarlarƒ±
        ctk.set_appearance_mode("system")
        ctk.set_default_color_theme(self.theme)
        
        self.title(f"{self.platform_icon} Evrensel Sistem G√ºncelleyici")
        self.geometry(self.window_size)
        
        # G√ºncelleme y√∂neticisi
        self.update_manager = UniversalUpdateManager()
        
        self.setup_ui()
    
    def setup_ui(self):
        # Platform bilgisi
        platform_info = PlatformDetector.get_platform_info()
        platform_name = platform_info.get('distribution') or f"{platform_info['system'].title()} {platform_info['release']}"
        
        # Ba≈ülƒ±k
        title_label = ctk.CTkLabel(self, text="üöÄ Evrensel Sistem G√ºncelleyici", 
                                  font=("Arial", 20, "bold"))
        title_label.pack(pady=15)
        
        # Platform bilgisi
        platform_label = ctk.CTkLabel(self, text=f"Platform: {platform_name}", 
                                     font=("Arial", 12))
        platform_label.pack(pady=5)
        
        # Progress bar
        self.progress = ctk.CTkProgressBar(self, width=450, height=20)
        self.progress.set(0)
        self.progress.pack(pady=15)
        
        # Durum label
        self.status_label = ctk.CTkLabel(self, text="Sistem hazƒ±r", 
                                        font=("Arial", 14))
        self.status_label.pack(pady=10)
        
        # Butonlar frame
        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=15)
        
        # G√ºncelle butonu
        self.update_btn = ctk.CTkButton(button_frame, text="üîÑ T√ºm√ºn√º G√ºncelle",
                                       command=self.start_update,
                                       font=("Arial", 14),
                                       width=140)
        self.update_btn.pack(side="left", padx=10)
        
        # Detaylar butonu
        self.details_btn = ctk.CTkButton(button_frame, text="üîç Sistem Detaylarƒ±",
                                        command=self.show_details,
                                        font=("Arial", 14),
                                        width=140)
        self.details_btn.pack(side="left", padx=10)
        
        # Detaylƒ± √ßƒ±ktƒ± alanƒ±
        self.output_text = ctk.CTkTextbox(self, width=460, height=150)
        self.output_text.pack(pady=10, fill="x", padx=20)
        self.output_text.insert("1.0", "G√ºncelleme detaylarƒ± burada g√∂r√ºnecek...\n")
        self.output_text.configure(state="disabled")
        
        # √áƒ±kƒ±≈ü butonu
        self.quit_btn = ctk.CTkButton(self, text="‚ùå √áƒ±kƒ±≈ü",
                                     command=self.destroy,
                                     fg_color="red",
                                     font=("Arial", 12))
        self.quit_btn.pack(pady=10)
    
    def show_details(self):
        """Detaylƒ± bilgi penceresini a√ß"""
        AdvancedDetailsWindow(self)
    
    def start_update(self):
        """G√ºncellemeyi ba≈ülat"""
        self.progress.set(0)
        self.status_label.configure(text="G√ºncelleme ba≈ülatƒ±lƒ±yor...")
        self.update_btn.configure(state="disabled")
        
        # √áƒ±ktƒ± alanƒ±nƒ± temizle
        self.output_text.configure(state="normal")
        self.output_text.delete("1.0", "end")
        self.output_text.insert("end", "üîß G√ºncelleme ba≈ülatƒ±ldƒ±...\n")
        self.output_text.configure(state="disabled")
        
        # Thread'de √ßalƒ±≈ütƒ±r
        thread = threading.Thread(target=self.run_update_thread)
        thread.daemon = True
        thread.start()
    
    def run_update_thread(self):
        self.update_manager.run_updates(self.update_progress, self.update_done)
    
    def update_progress(self, percent, detail):
        """ƒ∞lerlemeyi g√ºncelle"""
        self.progress.set(percent / 100)
        self.status_label.configure(text=f"G√ºncelleniyor... %{int(percent)}")
        
        self.output_text.configure(state="normal")
        self.output_text.insert("end", f"‚è≥ {detail}\n")
        self.output_text.see("end")
        self.output_text.configure(state="disabled")
    
    def update_done(self, message, details):
        """G√ºncelleme tamamlandƒ±"""
        self.progress.set(1.0)
        self.status_label.configure(text="Tamamlandƒ±!")
        self.update_btn.configure(state="normal")
        
        self.output_text.configure(state="normal")
        self.output_text.insert("end", f"\nüéâ {message}\n")
        for detail in details:
            self.output_text.insert("end", f"‚Ä¢ {detail}\n")
        self.output_text.see("end")
        self.output_text.configure(state="disabled")
        
        messagebox.showinfo("G√ºncelleme Tamamlandƒ±", message)

# ---------- Uygulamayƒ± Ba≈ülat ----------
if __name__ == "__main__":
    # √áapraz platform uyumluluk
    if platform.system().lower() not in ['windows', 'darwin', 'linux']:
        print("‚ö†Ô∏è Desteklenmeyen i≈ületim sistemi")
        sys.exit(1)
    
    app = UniversalUpdaterApp()
    app.mainloop()
